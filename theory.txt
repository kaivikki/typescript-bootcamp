-- Install Typescript
npm install -g typescript

-- Typescript adds:
  - Types
  - Next Gen Javascript features compiled down for old browsers.
  - Non Javascript features like Interfaces or Generics.
  - Meta-Programming features like Decorators.
  - Rich Configuration Options.

- Learning Path:
  - Typescript Basics
  - Compiler and Configurations
  - Working with Next-gen JS Code.
  - Classes & Interfaces.
  - Advanced Types and Typescript features.
  - Generics
  - Decorators
  - Working with Namesspaces and Modules.
  - Webpack & Typescript
  - Third Party Libraries and Typescript.
  - NodeJs + Express + Typescript.









/*parcel index.html

npmjs.com

Type Defination Files:
  Typescript code --->Type Defination File --> JS Library
When u install a JS Library either the type defination file is automatically installed 
or we need to install that manually.
U can search for type defination file using @types/<JS Library Name> from npmjs.com
They are usually end with .d.ts

To make the class available somewhere else in the project u need to export it
example: export class User{}

F1, fold level 2


*/

--Generate a tsconfig file.
tsc --init

--Watch the source directory and compile
tsc -w

--Run Compiled Code Automatically
npm install nodemon concurrently

TS and Express:
- Use the library normally, adding in basic type annotations where possible.
- Use a TS adapter library that has helpers for using your lib with TS
- Twist your library to work with TS classes.

npm install express @types/express body-parser @types/body-parser cookie-session @types/body-parser

ts-express-decorator

tsconfig Docs: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html

Compiler Config Docs: https://www.typescriptlang.org/docs/handbook/compiler-options.html

VS Code TS Debugging: https://code.visualstudio.com/docs/typescript/typescript-debugging

AXIOS WITH TS
https://marketsplash.com/tutorials/typescript/axios-typescript/

Difference between var and let is var has only two scopes global and function where as let also has block scope.

// UserRepository.test.ts
import oracledb from 'oracledb';
import UserRepository  from '../src';


describe('UserRepository', () => {
  let userRepository: UserRepository;
  let mockConnection: oracledb.Connection;

  beforeAll(() => {
    // Create a mock connection
    mockConnection = {} as oracledb.Connection;

    // Mock the oracledb module's behavior
    (oracledb as any).getConnection = jest.fn().mockResolvedValue(mockConnection);
    userRepository = new UserRepository(mockConnection);
  });

  it('should create a user', async () => {
   // Mock the execute method for create operation
  const mockExecute = jest.fn().mockResolvedValue({ /* Mocked result for create */ });
  mockConnection.execute = mockExecute;

  // Call the create method
  const user = { /* User data */ };
  await userRepository.create(user);

  // Add the assertion to check if execute has been called
  expect(mockExecute).toHaveBeenCalled();
  });
});

{
  "version": "1.0.0",
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Jest: current file",
      "program": "${workspaceFolder}/node_modules/.bin/jest",
      "args": ["${fileBasenameNoExtension}", "--config", "jest.config.js"],
      "console": "integratedTerminal",
      "windows": {
        "program": "${workspaceFolder}/node_modules/jest/bin/jest"
      }
    }
  ]
}